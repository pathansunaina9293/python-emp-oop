from abc import ABC, abstractmethod
class Employee(ABC):
    def __init__(self, employee_id, name, department):
        self.__employee_id = employee_id
        self.__name = name
        self.__department = department
        print("\n__init__ of Employee")
    @abstractmethod
    def calculate_salary(self):
        pass
    def display_details(self):
        print("\n--- Employee Details ---")
        print(f"Employee ID: {self.__employee_id}")
        print(f"Name: {self.__name}")
        print(f"Department: {self.__department}")
class PermanentEmployee(Employee):
    def __init__(self, employee_id, name, department, basic_salary, bonus):
        super().__init__(employee_id, name, department)
        self.basic_salary = basic_salary
        self.bonus = bonus
        print("__init__ of PermanentEmployee")
    def calculate_salary(self):
        return self.basic_salary + self.bonus
    def display_details(self):
        super().display_details()
        print(f"Basic Salary: ${self.basic_salary:.2f}")
        print(f"Bonus: ${self.bonus:.2f}")
        print(f"Total Salary: ${self.calculate_salary():.2f}\n")
class ContractEmployee(Employee):
    def __init__(self, employee_id, name, department, hourly_rate, hours_worked):
        super().__init__(employee_id, name, department)
        self.hourly_rate = hourly_rate
        self.hours_worked = hours_worked
        print("__init__ of ContractEmployee")
    def calculate_salary(self):
        return self.hourly_rate * self.hours_worked
    def display_details(self):
        super().display_details()
        print(f"Hourly Rate: ${self.hourly_rate:.2f}")
        print(f"Hours Worked: {self.hours_worked}")
        print(f"Total Salary: ${self.calculate_salary():.2f}\n")
class Intern(Employee):
    def __init__(self, employee_id, name, department, stipend):
        super().__init__(employee_id, name, department)
        self.stipend = stipend
        print("__init__ of Intern")
    def calculate_salary(self):
        return self.stipend
    def display_details(self):
        super().display_details()
        print(f"Stipend: ${self.stipend:.2f}")
        print(f"Total Salary: ${self.calculate_salary():.2f}\n")
if __name__ == "__main__":
    emp1 = PermanentEmployee("H123", "Harry Potter", "IT", 50000, 5000)
    emp1.display_details()
    emp2 = ContractEmployee("H456", "Hermione Granger", "HR", 50, 250)
    emp2.display_details()
    emp3 = Intern("R789", "Ron Weasley", "Finance", 5500)
    emp3.display_details()